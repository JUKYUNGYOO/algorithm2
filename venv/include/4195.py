# https://www.acmicpc.net/problem/4195
#
# 민혁이는 소셜 네트워크 사이트에서 친구를 만드는 것을 좋아하는 친구이다.
# 우표를 모으는 취미가 있듯이, 민혁이는 소셜 네트워크 사이트에서 친구를 모으는 것이 취미이다.
#
# 어떤 사이트의 친구 관계가 생긴 순서대로 주어졌을 때, 두 사람의 친구 네트워크에 몇 명이
# 있는지 구하는 프로그램을 작성하시오.
# 친구 네트워크란 친구 관계만으로 이동할 수 있는 사이를 말한다.
#
# 입력
# 첫째 줄에 테스트 케이스의 개수가 주어진다.
# 각 테스트 케이스의 첫째 줄에는 친구 관계의 수 F가 주어지며,
# 이 값은 100,000을 넘지 않는다. 다음 F개의 줄에는 친구 관계가 생긴 순서대로 주어진다.
# 친구 관계는 두 사용자의 아이디로 이루어져 있으며,
# 알파벳 대문자 또는 소문자로만 이루어진 길이 20 이하의 문자열이다.
#
# 출력
# 친구 관계가 생길 때마다,
# 두 사람의 친구 네트워크에 몇 명이 있는지 구하는 프로그램을 작성하시오.
#
# 예제 입력
# 2
# 3
# Fred Barney
# Barney Betty
# Betty Wilma
# 3
# Fred Barney
# Betty Wilma
# Barney Betty
# 예제 출력
# 2
# 3
# 4
# 2
# 2
# 4

# 그래프 네트워크를 출력하는 수

#해쉬를 활용한 union-find 알고리즘을 활용해서 푸는 문제


# 합집합 찾기(Union-Find)알고리즘
# 원소들의 연결 여부를 확인하는 알고리즘
# 더 작은 원소를 부모로 삼도록 설정
#
# 부모테이블
# 1 2 3 4
# 1 2 3 4
# 1-4
# 2-4
# 1이라는 원소를 가르키는 원소는 1,2,4
# 이기 때문에
# 3은 자기 자신노드로만 구성 되어짐

#{1,2,4},{3}
#총 두개의 집합으로 이루어짐

# 부모테이블
# 1 2 3 4
# 1 1 3 1
#
# 1<-2
# 1<-4
# {1,2,4},{3}

def find(x):
    if x== parent[x]:
        return x
    else:
        p = find(parent[x]) # 부모를 찾아서
        parent[x] = p  # 자기자신의 부모로 설정
        return parent[x] # 부모 값을 반환

# 찾은 부모끼리 연결 해 줌
# 오른쪽 원소(y)의 부모 값을 x로 설정해 줌
def union(x,y):
    x = find(x)
    y = find(y)
    parent[y] = x

# 리스트 생성
parent = []
# 0,1,2,3,4
for i in range(0,5):
    parent.append(i)

union(1,4)
union(2,4)
#
# [0,1,2,3,4]
#  0,1,2,3,4
#  1과4연결 4가1로 바뀌고
#  2와4연결 2가1로 바뀌고


# 1 1 3 1 이 출력 됨에 따라서
#{1,2,4},{3}이 집합이라는 것을 알 수 있다.
for i in range(1,len(parent)):
    print(find(i),end=' ')

#
# 1<-3
# |
# 5<-7






